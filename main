package battleship;

import battleship.gametools.GamePoint;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Scanner;

public class Main {

    public enum GameStages {
        START, PLAY, WRONG, HIT, MISSED, DOUBLE, SANK, OVER
    }

    public static GameStages gameStage = GameStages.START;

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        PlayerRepository rep = new PlayerRepository();
        ArrayList<Player> players = rep.getPlayers();

        String startingGame;

        LinkedHashMap<String, Integer> ships;

        for (Player player : players) {
            System.out.print("Player " + (players.indexOf(player) + 1) + ", place your ships on the game field");
            startingGame = player.initPlayer();
            System.out.print(startingGame);

            ships = player.getShips();

            ships.forEach((k, v) -> {
                System.out.println("Enter the coordinates of the " + k + " (" + v + " cells):");
                boolean valid = false;
                while (!valid) {
                    String[] input = scanner.nextLine().split(" ");
                    GamePoint start = new GamePoint(Math.min(Integer.parseInt(input[0].substring(1)), Integer.parseInt(input[1].substring(1))),
                            Math.min(CoordinatesConverter.convert(input[0].charAt(0)), CoordinatesConverter.convert(input[1].charAt(0))));
                    GamePoint end = new GamePoint(Math.max(Integer.parseInt(input[0].substring(1)), Integer.parseInt(input[1].substring(1))),
                            Math.max(CoordinatesConverter.convert(input[0].charAt(0)), CoordinatesConverter.convert(input[1].charAt(0))));

                    try {
                        if (CoordinatesValidator.validate(start, end, v, k, player.getGame())) {
                            player.placeShip(start, end);
                            valid = true;
                            System.out.print(player.getGame().toString());
                        }
                    } catch (IllegalArgumentException e) {
                        System.out.println(e.getMessage());
                    }
                }
            });
            if (players.indexOf(player) < players.size()-1) {
                System.out.println("Press Enter and pass the move to another player");
                String enter = scanner.nextLine();
            }
        }

        Player currentPlayer = players.get(1);
        Player opponent = players.get(0);

        GamePoint shot = new GamePoint(0, 0);

        System.out.println("The game starts!");

        while (gameStage != GameStages.OVER) {
            switch (gameStage) {
                case START:
                    System.out.println("Press Enter and pass the move to another player");
                    String enter = scanner.nextLine();
                    currentPlayer = rep.changePlayer(currentPlayer);
                    opponent = rep.changePlayer(opponent);

                    System.out.print(opponent.getHiddenGame().toString());
                    System.out.println("--------------------------");
                    System.out.print(currentPlayer.getGame().toString());
                    System.out.println("Player " + (1 + players.indexOf(currentPlayer)) + ", it's your turn:");
                    gameStage = GameStages.PLAY;
                    break;

                case PLAY:
                    String coordinates = scanner.nextLine();
                    try {
                        shot = new GamePoint(Integer.parseInt(coordinates.substring(1)),
                                CoordinatesConverter.convert(coordinates.charAt(0)));
                        if (opponent.getGame().returnValue(shot).equals("~")) {
                            gameStage = GameStages.MISSED;
                        } else if (opponent.getGame().returnValue(shot).equals("O")) {
                            gameStage = GameStages.HIT;
                        } else {
                            gameStage = GameStages.DOUBLE;
                        }
                    } catch (IllegalArgumentException e) {
                        gameStage = GameStages.WRONG;
                    }
                    break;

                case WRONG:
                    System.out.println("Error! You entered the wrong coordinates!");
                    gameStage = GameStages.START;
                    break;

                case HIT:
                    opponent.getGame().setValue(shot, "X");
                    opponent.getHiddenGame().setValue(shot, "X");
                    if (opponent.verifyIfDead(shot)) {
                        gameStage = GameStages.SANK;
                    } else {
                        gameStage = GameStages.START;
                        System.out.println("You hit a ship!");
                    }
                    break;

                case MISSED:
                    opponent.getGame().setValue(shot, "M");
                    opponent.getHiddenGame().setValue(shot, "M");
                    System.out.println("You missed!");
                    gameStage = GameStages.START;
                    break;

                case DOUBLE:
                    System.out.println("You already tried this field!");
                    gameStage = GameStages.START;
                    break;

                case SANK:
                    if (opponent.getDeadShips() < opponent.getShips().size()) {
                        System.out.println("You sank a ship!");
                        gameStage = GameStages.START;
                    } else {
                        System.out.println("You sank the last ship. You won. Congratulations!");
                        gameStage = GameStages.OVER;
                    }
                    break;
            }
        }
    }
}
